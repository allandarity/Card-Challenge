package uk.co.cardchallenge.ui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import uk.co.cardchallenge.model.Card;
import uk.co.cardchallenge.model.Deck;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Objects;

public class MainFrame extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JTextArea textArea1;
    private JLabel imageLabel;
    private JButton drawMultipleButton;
    private JButton newButton;

    Deck deck = new Deck();
    Icon icon;

    public MainFrame() {
        setContentPane(contentPane);
        this.setTitle("Card Drawer");
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);
        icon = new ImageIcon(Objects.requireNonNull(getClass().getClassLoader().getResource("Q.jpg")));
        imageLabel.setIcon(icon);

        buttonOK.addActionListener(e -> onOK());

        drawMultipleButton.addActionListener(e -> drawMultiple());

        buttonCancel.addActionListener(e -> onCancel());

        newButton.addActionListener(e -> newDeck());

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);

        this.pack();
        this.setVisible(true);
    }

    private void addText(List<String> text) {
        text.forEach(s -> textArea1.append(s + "\n"));
    }

    private void onOK() {
        if (deck.cardsLeft() > 0) {
            Card card = deck.drawCard();
            addText(Arrays.asList(card.toString() + " is drawn", deck.cardsLeft() + " remain"));
            setImage(card);
        } else {
            addText(Collections.singletonList("There are no cards left"));
        }
    }

    private void onCancel() {
        deck.shuffleDeck();
        addText(Arrays.asList("Cards have been shuffled", "Head card is - " + deck.getHeadCard(), deck.cardsLeft() + " remain"));
    }

    private void drawMultiple() {
        try {
            int no = Integer.valueOf(JOptionPane.showInputDialog(this, "Enter Number of Cards"));
            if(no <= deck.cardsLeft()) {
                if (deck.cardsLeft() > 0) {
                    List<Card> list = deck.drawMultiple(no);
                    System.out.println(no);
                    System.out.println(list.size());
                    list.forEach(card -> {
                        addText(Collections.singletonList(card.toString() + " is drawn"));
                    });
                    setImage(list.get(list.size() - 1));
                    addText(Collections.singletonList(deck.cardsLeft() + " remain"));
                } else {
                    addText(Collections.singletonList("There are no cards left"));
                }
            } else {
                JOptionPane.showMessageDialog(this, "TOO MANY");
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "MUST BE A NUMBER");
        }
    }

    private void setImage(Card card) {
        try {
            imageLabel.setIcon(new ImageIcon(
                    new ImageIcon(Objects.requireNonNull(getClass().getClassLoader().
                            getResource(card.getImagePath())))
                            .getImage().getScaledInstance(200, 200, Image.SCALE_DEFAULT)));
        } catch (Exception e) {
            icon = new ImageIcon(Objects.requireNonNull(getClass().getClassLoader().getResource("Q.jpg")));
            imageLabel.setIcon(icon);
        }
    }

    private void newDeck() {
        this.deck = new Deck();
        addText(Arrays.asList("--------", "New Deck", "---------", deck.cardsLeft() + " remain"));
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Shuffle");
        panel2.add(buttonCancel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        newButton = new JButton();
        newButton.setText("New");
        panel2.add(newButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setText("Draw One");
        panel1.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        drawMultipleButton = new JButton();
        drawMultipleButton.setText("Draw Multiple");
        panel1.add(drawMultipleButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        imageLabel = new JLabel();
        imageLabel.setText("");
        panel3.add(imageLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel3.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(500, -1), null, null, 0, false));
        textArea1 = new JTextArea();
        scrollPane1.setViewportView(textArea1);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
